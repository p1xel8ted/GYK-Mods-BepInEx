<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Header" xml:space="preserve">
    <value>Gerry의 정크 트렁크</value>
  </data>
  <data name="Message1" xml:space="preserve">
    <value>Gerry의 정크 트렁크를 설치해 주셔서 감사합니다!</value>
  </data>
  <data name="Message2" xml:space="preserve">
    <value>- Gerry의 트렁크는 처음에 10칸으로 제한됩니다.</value>
  </data>
  <data name="Message3" xml:space="preserve">
    <value>- 하나만 지을 수 있습니다.</value>
  </data>
  <data name="Message4" xml:space="preserve">
    <value>- 아이템은 한번 들어가면 나오지 않습니다.</value>
  </data>
  <data name="Message5" xml:space="preserve">
    <value>- 트렁크에 있는 아이템은 하루가 끝나면 판매됩니다(달이 교회를 조금 지나갈 때).</value>
  </data>
  <data name="Message7" xml:space="preserve">
    <value>- 트렁크에는 특정 기술/특전과 연결된 초기 잠금 해제 및 두 가지 향상의 세 가지 진행 수준이 있습니다.</value>
  </data>
  <data name="Message8" xml:space="preserve">
    <value>즐기다! - p1xel8ted</value>
  </data>
  <data name="Stage1Des" xml:space="preserve">
    <value>제작: 야드 빌드 데스크. 최대 스택 크기가 50인 슬롯이 10개 있습니다.</value>
  </data>
  <data name="Stage1Header" xml:space="preserve">
    <value>생성: Gerry의 정크 트렁크.</value>
  </data>
  <data name="Stage2Des" xml:space="preserve">
    <value>Gerry의 쓰레기 트렁크가 확장됩니다! 이제 최대 스택 크기가 50인 슬롯이 20개 있습니다.</value>
  </data>
  <data name="Stage2Header" xml:space="preserve">
    <value>강화: 게리의 쓰레기통</value>
  </data>
  <data name="Stage3Header" xml:space="preserve">
    <value>강화: 게리의 쓰레기통</value>
  </data>
  <data name="WorkWork" xml:space="preserve">
    <value>일하다. 일하다.</value>
  </data>
  <data name="Message6" xml:space="preserve">
    <value>- 판매자에게 더 많은 것을 얻을 수 있습니다. Gerry는 이익의 일부를 가져갑니다.</value>
  </data>
  <data name="Stage3Des" xml:space="preserve">
    <value>Gerry는 이익을 더 적게 줄이고 최대 스택 크기를 100으로 늘렸습니다.</value>
  </data>
  <data name="Vendor" xml:space="preserve">
    <value>공급업체</value>
  </data>
  <data name="Vendors" xml:space="preserve">
    <value>공급업체</value>
  </data>
  <data name="HeaderSales" xml:space="preserve">
    <value>Gerry의 정크 트렁크 판매</value>
  </data>
  <data name="For" xml:space="preserve">
    <value>~을 위한</value>
  </data>
  <data name="Bye" xml:space="preserve">
    <value>안녕히 계세요.</value>
  </data>
  <data name="Nothing" xml:space="preserve">
    <value>뭐?! 아무것도 아님!</value>
  </data>
  <data name="GerrysPrice" xml:space="preserve">
		<value>게리의 가격:</value>
	</data>
  <data name="ConfigMessage" xml:space="preserve">
    <value>구성이 다시 로드되었습니다!</value>
  </data>
</root>