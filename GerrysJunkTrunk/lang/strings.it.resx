<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Header" xml:space="preserve">
    <value>Il baule spazzatura di Gerry</value>
  </data>
  <data name="Message1" xml:space="preserve">
    <value>Grazie per aver installato Junk Trunk di Gerry!</value>
  </data>
  <data name="Message2" xml:space="preserve">
    <value>- Il baule di Gerry è inizialmente limitato a dieci spazi.</value>
  </data>
  <data name="Message3" xml:space="preserve">
    <value>- Puoi costruirne solo uno.</value>
  </data>
  <data name="Message4" xml:space="preserve">
    <value>- Una volta che gli oggetti entrano, non escono.</value>
  </data>
  <data name="Message5" xml:space="preserve">
    <value>- Gli oggetti nel baule vengono venduti alla fine della giornata (luna poco dopo la chiesa).</value>
  </data>
  <data name="Message7" xml:space="preserve">
    <value>- Il baule ha tre livelli di avanzamento, sblocco iniziale e poi due miglioramenti, legati a determinate tecnologie/vantaggi.</value>
  </data>
  <data name="Message8" xml:space="preserve">
    <value>Divertiti! - p1xel8ted</value>
  </data>
  <data name="Stage1Des" xml:space="preserve">
    <value>Realizzato presso: scrivania di costruzione in cantiere. Dispone di 10 slot con una dimensione massima dello stack di 50.</value>
  </data>
  <data name="Stage1Header" xml:space="preserve">
    <value>Crea: il baule della spazzatura di Gerry.</value>
  </data>
  <data name="Stage2Des" xml:space="preserve">
    <value>Il baule della spazzatura di Gerry è stato ampliato! Ora ha 20 slot con una dimensione massima dello stack di 50.</value>
  </data>
  <data name="Stage2Header" xml:space="preserve">
    <value>Potenziamento: il baule spazzatura di Gerry</value>
  </data>
  <data name="Stage3Header" xml:space="preserve">
    <value>Potenziamento: il baule spazzatura di Gerry</value>
  </data>
  <data name="WorkWork" xml:space="preserve">
    <value>Opera. Opera.</value>
  </data>
  <data name="Message6" xml:space="preserve">
    <value>- Ottieni di più dal venditore. Gerry prende una parte dei profitti.</value>
  </data>
  <data name="Stage3Des" xml:space="preserve">
    <value>Gerry prende una riduzione minore dei profitti e la dimensione massima dello stack è aumentata a 100.</value>
  </data>
  <data name="Vendor" xml:space="preserve">
    <value>Venditore</value>
  </data>
  <data name="Vendors" xml:space="preserve">
    <value>Fornitori</value>
  </data>
  <data name="HeaderSales" xml:space="preserve">
    <value>Vendite di baule spazzatura di Gerry</value>
  </data>
  <data name="For" xml:space="preserve">
    <value>per</value>
  </data>
  <data name="Bye" xml:space="preserve">
    <value>Addio.</value>
  </data>
  <data name="Nothing" xml:space="preserve">
    <value>Che cosa?! Niente!</value>
  </data>
  <data name="GerrysPrice" xml:space="preserve">
		<value>Il prezzo di Gerry:</value>
	</data>
  <data name="ConfigMessage" xml:space="preserve">
    <value>Configurazione ricaricata!</value>
  </data>
</root>