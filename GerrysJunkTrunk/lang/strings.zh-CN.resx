<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Header" xml:space="preserve">
    <value>格里的垃圾箱</value>
  </data>
  <data name="Message1" xml:space="preserve">
    <value>感谢您安装 Gerry's Junk Trunk！</value>
  </data>
  <data name="Message2" xml:space="preserve">
    <value>- 格里的后备箱最初仅限于十个空间。</value>
  </data>
  <data name="Message3" xml:space="preserve">
    <value>- 你只能建造一个。</value>
  </data>
  <data name="Message4" xml:space="preserve">
    <value>- 一旦物品进入，它们就不会出来。</value>
  </data>
  <data name="Message5" xml:space="preserve">
    <value>- 后备箱中的物品在一天结束时出售（月亮略过教堂）。</value>
  </data>
  <data name="Message7" xml:space="preserve">
    <value>- 后备箱有三个级别的进度，初始解锁，然后是两个增强功能，与某些技术/特权相关联。</value>
  </data>
  <data name="Message8" xml:space="preserve">
    <value>享受！ - p1xel8ted</value>
  </data>
  <data name="Stage1Des" xml:space="preserve">
    <value>制作于：庭院建造台。有 10 个插槽，最大堆栈大小为 50。</value>
  </data>
  <data name="Stage1Header" xml:space="preserve">
    <value>创建：格里的垃圾箱。</value>
  </data>
  <data name="Stage2Des" xml:space="preserve">
    <value>格里的垃圾箱扩大了！现在有 20 个插槽，最大堆栈大小为 50。</value>
  </data>
  <data name="Stage2Header" xml:space="preserve">
    <value>增强：格里的垃圾箱</value>
  </data>
  <data name="Stage3Header" xml:space="preserve">
    <value>增强：格里的垃圾箱</value>
  </data>
  <data name="WorkWork" xml:space="preserve">
    <value>工作。工作。</value>
  </data>
  <data name="Message6" xml:space="preserve">
    <value>- 你从供应商那里得到更多。格里从利润中分一杯羹。</value>
  </data>
  <data name="Stage3Des" xml:space="preserve">
    <value>Gerry 减少了利润分成，最大筹码量增加到 100。</value>
  </data>
  <data name="Vendor" xml:space="preserve">
    <value>小贩</value>
  </data>
  <data name="Vendors" xml:space="preserve">
    <value>供应商</value>
  </data>
  <data name="HeaderSales" xml:space="preserve">
    <value>格里的垃圾箱销售</value>
  </data>
  <data name="For" xml:space="preserve">
    <value>为了</value>
  </data>
  <data name="Bye" xml:space="preserve">
    <value>再见。</value>
  </data>
  <data name="Nothing" xml:space="preserve">
    <value>什么？！没有什么！</value>
  </data>
  <data name="GerrysPrice" xml:space="preserve">
		<value>格瑞价格：</value>
	</data>
  <data name="ConfigMessage" xml:space="preserve">
    <value>配置重新加载！</value>
  </data>
</root>